{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","CartItem/CartItem.styles.ts","CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Item","item","handleAddToCart","src","image","alt","title","description","price","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","toFixed","size","disableElevation","variant","id","aside","Cart","items","cartItems","length","map","reduce","acc","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","console","log","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","querySelector"],"mappings":"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","file":"static/js/main.ac5a1b9c.chunk.js","sourcesContent":["// item.styled.ts\nimport styled from 'styled-components';\n\nexport  const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  border: 1px solid lightred;\n  border-radius: 20px;\n  height: 100%;\n\n  button {\n    border-radius: 0 0 20px 20px;\n  }\n\n  img {\n    max-height: 250px;\n    object-fit: cover;\n    border-radius: 20px 20px 0 0;\n\n  }\n\n  div {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 1rem;\n    height: 100%;\n\n  }\n`;","// Item.tsx\nimport Button from '@material-ui/core/Button';\n// Types\nimport { CartItemType } from '../App';\n// Styles\nimport { Wrapper } from './Item.styles';\n\ntype Props = {\n  item: CartItemType;\n  handleAddToCart: (clickedItem: CartItemType) => void;\n}\n\nconst Item: React.FC<Props> = ({item, handleAddToCart}) => (\n  <Wrapper>\n    <img src={item.image} alt={item.title} ></img>\n    <div>\n      <h3>{item.title}</h3>\n      <p>{item.description}</p>\n      <h3>$ {item.price}</h3>\n    </div>\n    <Button onClick={ () => handleAddToCart(item)} > Add to Cart</Button>\n  </Wrapper>\n);\n\nexport default Item;","// CartItem/CartItem.styles.ts\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-family: Arial, Helvetica, sans-serif;\n  border-bottom: 1px solid grey;\n  padding-bottom: 20px;\n\n  div {\n    flex: 1;\n  }\n\n  .buttons, .information {\n     display: flex;\n     justify-content: space-beetwen;\n  }\n\n  img {\n    max-width: 80px;\n    object-fit: cover;\n    margin-left: 40px; \n  }\n`;","// CartItem/CartItem.tsx\nimport Button from '@material-ui/core/Button';\n// Types\nimport { CartItemType } from '../App';\n//import Item from '../Item/Item';\n// Styles\nimport { Wrapper } from './CartItem.styles';\n\ntype Props = {\n  item: CartItemType;\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst CartItem: React.FC<Props> = ({item, addToCart, removeFromCart}) => (\n  <Wrapper>\n    <div>\n      <h3>{item.title}</h3>\n      <div className='information'>\n        <p>Price: $ {item.price}</p>\n        <p>Total: $ {(item.amount * item.price).toFixed(2)}</p>\n      </div>\n      <div className='buttons'>\n        <Button \n          size='small'\n          disableElevation\n          variant='contained'\n          onClick={() => removeFromCart(item.id)} \n          >-</Button>\n        <p>{item.amount}</p>\n        <Button \n          size='small'\n          disableElevation\n          variant='contained'\n          onClick={() => addToCart(item)}\n        >+</Button>\n      </div>\n    </div>\n    <img src={item.image} alt={item.title}  />\n  </Wrapper>\n);\n\nexport default CartItem;\n","// Cart/Cart.styles.ts\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.aside`\n  font-family: Arial, Helvetica, sans-serif;\n  width: 500px;\n  padding: 20px;\n\n`;","// Cart/Cart.tsx\nimport CartItem from '../CartItem/CartItem';\n// Styles\nimport { Wrapper } from './Cart.styles';\n// Types\nimport { CartItemType } from '../App';\n\ntype Props = {\n  cartItems: CartItemType[];\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n\n};\n\nconst Cart: React.FC<Props> = ({cartItems, addToCart, removeFromCart}) => {\n\n  const calculateTotal = (items: CartItemType[]) =>\n    items.reduce( (acc: number, item: CartItemType) => acc + item.amount * item.price, 0); \n\n\n  return (\n    <Wrapper>\n      <h2>Your Shopping Cart</h2>\n      {cartItems.length === 0 ? <p>Empty Cart</p> : null }\n      {cartItems.map( (item) => (\n        <CartItem\n          key={item.id}\n          item={item}\n          addToCart={addToCart}\n          removeFromCart={removeFromCart}\n        />\n      ))}\n      <p>Total: $ {calculateTotal(cartItems).toFixed(2)}</p>\n    </Wrapper>\n  );\n};\n\nexport default Cart;","// App.styles.ts\nimport styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\nexport const Wrapper = styled.div`\n  margin: 40px;\n`;\n\nexport const StyledButton = styled(IconButton)`\n  position: fixed;\n  z-index: 100;\n  right: 20px;\n  top: 20px;\n`;","// App.tsx\nimport { useState } from 'react';\nimport { useQuery } from 'react-query';\n// Components\nimport Item from './Item/Item';\nimport Cart from './Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\n// Styles\nimport { Wrapper, StyledButton } from './App.styles';\n// Types\nexport type CartItemType =  {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> => \n  await (await fetch('https://fakestoreapi.com/products')).json();\n\nconst App = () => {\n\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n\n  const { data, isLoading, error } = \n    useQuery<CartItemType[]>('products', getProducts);\n\n  console.log(data);\n\n  const getTotalItems =  (items: CartItemType[]) => \n    items.reduce( (acc: number, item) => acc + item.amount, 0);\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems( prev => {\n      const isItemInCart = prev.find(item => item.id === clickedItem.id);\n\n      if(isItemInCart){\n        return prev.map( item =>\n          item.id === clickedItem.id\n          ? { ...item, amount: item.amount + 1}\n          : item\n        );\n      }else{\n        return [ ...prev, { ...clickedItem, amount: 1 } ];\n      }\n    });\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems( prev => \n      prev.reduce( (acc, item) => {\n        if(item.id === id){\n          if( item.amount === 1) return acc;\n          return [ ...acc, { ...item, amount: item.amount - 1 }];\n        }else{\n          return [ ...acc, item];\n        }\n      }, [] as CartItemType[] )\n    );\n  };\n\n  if(isLoading) return <LinearProgress />;\n  if(error) return <div>Something went wrong ...</div>;\n  return (\n    <Wrapper>\n      <Drawer anchor='right' open={cartOpen} onClose={ () => setCartOpen(false) }> \n        <Cart cartItems={cartItems}  \n              addToCart={handleAddToCart} \n              removeFromCart={handleRemoveFromCart} />\n      </Drawer>\n      <StyledButton onClick={ ( ) => setCartOpen(true)} >\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map((item: CartItemType) => (\n          <Grid item key={item.id} xs={12} sm={4} >\n            <Item item={item} handleAddToCart={handleAddToCart} /> \n          </Grid>\n        ))}\n\n      </Grid>\n    </Wrapper>\n  );\n}\nexport default App;\n","// index.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider} from 'react-query';\n\nconst client = new QueryClient();\nReactDOM.render( \n  <QueryClientProvider client={client} >\n    <App />\n  </QueryClientProvider>, \n  document.querySelector('#root'));\n\n"],"sourceRoot":""}